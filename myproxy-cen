#!/usr/local/bin/python2.7

import ConfigParser, os, sys
import syslog
import subprocess
import json
import smtplib
from email.mime.text import MIMEText

config = None

def get_config():
    global config
    if config == None:
        config_file_path = '/etc/myproxy-watchdog.conf'
        config = ConfigParser.ConfigParser()
        try:
            config.readfp(open(config_file_path))
        except Exception, e:
            sys.exit("Error reading configuration file: %s" % (config_file_path))
    return config

def get_myproxy_admin_query_output():
    myproxy_admin_query_cmd = 'myproxy-admin-query'
    if get_config().has_option('myproxy_cen','myproxy_admin_query'):
        myproxy_admin_query_cmd = get_config().get('myproxy_cen','myproxy_admin_query')
    cmd_output = subprocess.check_output([myproxy_admin_query_cmd])

    return cmd_output.splitlines()

def parse_myproxy_admin_query_output(output):
    entries = []
    entry = {}

    for line in output:
        if line.startswith('owner: '):
            if len(entry) != 0:
                entries.append(entry.copy())
            entry.clear()
            entry['owner'] = line.split(' ', 1)[1]
            entry['username'] = ''
            entry['name'] = ''
        elif line.startswith('username: '):
            entry['username'] = line.split(' ', 1)[1]
        elif line.startswith('name: '):
            entry['name'] = line.split(' ', 1)[1]
        elif line.startswith('timeleft: '):
            entry['timeleft'] = line.split(' ')[1]

    if entry != None:
        entries.append(entry.copy())

    syslog.syslog(syslog.LOG_DEBUG, '%d entrie(s) parsed.' % (len(entries)))
    return entries
                
def get_notification_recipients():
    if get_config().has_option('myproxy_cen','notification_recipients'):
        # d = json.loads('{"DN":["andre@titanium.sao.nrc.ca", 12]}')
        recipients = json.loads(get_config().get('myproxy_cen','notification_recipients'))
        return recipients
    else:
        syslog.syslog(syslog.LOG_INFO, 'No recipients found in config file.')
        return {}

def hms_to_h(s):
    return s.split(':')[0]

def notify_recipient(entry, recipient):
    mail_body = """
The following credentials in %s will expire in %s hours:

Owner: %s
Creds name: %s
Username: %s

Please renew your credentials as soon as possible.
""" % (get_config().get('myproxy_cen','myproxy_server_description'), entry['timeleft'], entry['owner'], entry['username'], entry['name'])

    msg = MIMEText(mail_body)
    msg['Subject'] = 'myproxy-watchdog notification from %s' % (get_config().get('myproxy_cen','myproxy_server_description'))
    msg['To'] = recipient[0]
    msg['From'] = get_config().get('myproxy_cen', 'from_address')

    server = smtplib.SMTP(get_config().get('myproxy_cen', 'smtp_server'))
    server.sendmail(msg['From'], [msg['To']], msg.as_string())
    server.quit()
    syslog.syslog(syslog.LOG_INFO, 'notification sent to %s' % (msg['To']))
    
def process_entries(entries):
    recipients = get_notification_recipients()
    if recipients == None:
        return

    for entry in entries:
        print 'Processing entry %s' % (entry)
        if entry['owner'] in recipients:
            print 'Creds owner is in recipient list.'
            recipient = recipients[entry['owner']]
            recipient_email = recipient[0]
            recipient_threshold = recipient[1]
            if hms_to_h(entry['timeleft']) < recipient_threshold:
                notify_recipient(entry, recipient)
            else:
                print 'Threshold not exceeded.. staying quiet.'





if __name__ == '__main__':

    syslog.syslog('Proxy expiry check started.')

    # Get myproxy-admin-query output and extract the entries
    cmd_output = get_myproxy_admin_query_output()
    entries = parse_myproxy_admin_query_output(cmd_output)

    # Process the entries
    process_entries(entries)

    # We're done
    syslog.syslog('Proxy expiry check done.')

    sys.exit()
